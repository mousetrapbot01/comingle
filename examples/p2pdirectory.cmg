
ensem p2pdirectory {

	module comingle.lib.ExtLib import {
		not  :: bool -> bool.
	}

	module p2pdirectory.WifiDirectComingleDirectory import {
		ownerLoc :: int -> loc.
		lookupIP :: loc -> string.
		retrieveDir :: int -> {(loc,string,string)}.
	}

	predicate startOwner  :: string -> trigger.
	predicate startMember :: string -> trigger.
	predicate quit        :: trigger.
	predicate connect     :: string -> trigger.

	predicate joined      :: loc -> fact.
	predicate member      :: string -> fact.
	predicate owner       :: string -> fact.
	predicate joinRequest :: (string,string,loc) -> fact.
	predicate exit        :: loc -> fact.

	predicate added   :: (loc,string,string) -> actuator.
	predicate removed :: loc -> actuator.
	predicate connected :: actuator.
	predicate ownerQuit :: actuator.
	predicate deleteDir :: actuator.

	rule startOwner  :: [O]startOwner(C) --o [O]owner(C), [O]joined(O).

	rule startMember :: [M]startMember(C) --o [M]member(C).

	rule connect :: [M]member(C) \ [M]connect(N) 
                              --o [O]joinRequest(C,N,M) where O = ownerLoc(0).

	rule join :: [O]owner(C), {[O]joined(M)|M->Ms}
                     \ [O]joinRequest(C,NewN,NewM) | not(NewM in Ms) 
                            --o { [M]added(NewM,NewIP,NewN) | M<-Ms }, 
                                { [NewM]added(M,IP,N) | (M,IP,N)<-Ds }, [NewM]added(NewM,NewIP,NewN),
                                [O]joined(NewM), [NewM]connected()
                                where NewIP = lookupIP(NewM),
                                      Ds = retrieveDir(0).

	rule quitO  :: [O]owner(C), [O]quit(), {[O]joined(P)|P->Ps} 
                                 --o { [P]ownerQuit() | P<-Ps }.

	rule quitM :: [M]member(C) \ [M]quit() --o [O]exit(M) where O = ownerLoc(0).

	rule exit  :: { [O]joined(M) | M->Ms. not(M == N) } \ [O]exit(N), [O]joined(N) 
                            --o { [M]removed(N) | M<-Ms }, [N]deleteDir().

}

execute p2pdirectory {

}
