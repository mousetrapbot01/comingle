
ensem p2pdirectory {

	module comingle.lib.ExtLib import {
		diff :: ({A},{A}) -> {A}.
		not  :: bool -> bool.
		union :: ({A},{A}) -> {A}.
	}

	module p2pdirectory.WifiDirectComingleDirectory import {
		nextLoc  :: loc -> loc.
		ownerLoc :: int -> loc.
		lookupIP :: string -> string.
		retrieveDir :: int -> {(loc,string,string,string)}.
	}

	predicate startOwner  :: string -> trigger.
	predicate startMember :: string -> trigger.
	predicate quit        :: trigger.
	predicate connect     :: (string,string) -> trigger.

	predicate node        :: loc -> fact.
	predicate seen        :: string -> fact.
	predicate member      :: fact.
	predicate owner       :: fact.
	predicate ownerAt     :: loc -> fact.
	predicate joinRequest :: (string,string,string) -> fact.
	predicate reqCode     :: string -> fact.
	predicate next        :: loc -> fact.
	predicate exit        :: loc -> fact.

	predicate added   :: (loc,string,string,string) -> actuator.
	predicate removed :: loc -> actuator.
	predicate you     :: loc -> actuator.
	predicate ownerQuit :: actuator.

	rule startOwner  :: [O]startOwner(C) 
                                   --o [O]owner(), [O]node(O), [O]reqCode(C), [O]next(L)
                                       where L = nextLoc(O).
	rule startMember :: [L]startMember(C) 
                                   --o [L]member(), [L]reqCode(C), [L]ownerAt(O)
                                       where O = ownerLoc(0).

	rule connect :: [L]member(), [L]ownerAt(O), [L]reqCode(C) \ [L]connect(N,M) 
                              --o [O]joinRequest(C,N,M).

	rule join :: [O]owner(), [O]reqCode(C), {[O]node(P)|P->Ps}, {[O]seen(S)|S->Ms}
                     \ [O]joinRequest(C,N,M), [O]next(L) 
                           | not(M in Ms) --o { [P]added(L,IP,N,M) | P<-Ps }, 
                                              { [L]added(Lr,Ir,Nr,Mr) | (Lr,Ir,Nr,Mr)<-Ds }, [L]added(L,IP,N,M), [L]you(L), 
                                              [O]next(U), [O]node(L), [O]seen(M)
                                                where U  = nextLoc(L),
                                                      IP = lookupIP(M),
                                                      Ds = retrieveDir(0).

	rule quitO  :: [O]owner(), {[O]node(P)|P->Ps} \ [O]quit() 
                                 --o { [P]ownerQuit() | P<-Ps }.

	rule quitM :: [M]member(), [M]ownerAt(O) \ [M]quit() --o [O]exit(M).
	rule exit  :: [O]exit(M), {[O]node(P)|P->Ps} 
                            --o { [B]removed(M) | B<-Bs }, {[O]node(B)|B<-Bs}
                                where Bs = diff(Ps,{M}).

}

execute p2pdirectory {

}
