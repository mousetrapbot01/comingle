
ensem battleship {

	module comingle.lib.ExtLib import {
		union :: ({A},{A}) -> {A},
		size  :: {A} -> int
	}

	predicate fireAt :: (loc,int,int) -> trigger.

	predicate empty     :: (int,int) -> fact.
	predicate hull      :: (string,int,int) -> fact.
	predicate damaged   :: (string,int,int) -> fact.
	predicate destroyed :: (string,int,int) -> fact.
	predicate checkSunk :: (loc,string) -> fact.

	predicate missed :: (loc,int,int) -> actuator.
	predicate hit    :: (loc,int,int) -> actuator.
	predicate sunk   :: (loc,string) -> actuator.

	rule miss :: [B]empty(X,Y) \ [A]fireAt(B,X,Y) --o [A]missed(B,X,Y).

	rule goodHit :: [A]fireAt(B,X,Y), [B]hull(S,X,Y) --o [B]damaged(S,X,Y), [A]hit(B,X,Y), [B]checkSunk(A,S).
	rule dmgHit  :: [B]damaged(S,X,Y) \ [A]fireAt(B,X,Y) --o [A]hit(B,X,Y).
	rule destHit :: [B]destroyed(S,X,Y) \ [A]fireAt(B,X,Y) --o [A]hit(B,X,Y).

	rule sunk :: [B]checkSunk(A,S), { [B]damaged(S,X,Y) | (X,Y) <- Ds }, { [B]hull(S,X,Y) | (X,Y) <- Hs } | (size(Hs))==0
                          --o { [B]destroyed(S,X,Y) | (X,Y) <- union(Hs,Ds) }, [A]sunk(B,S).

}

execute battleship {

	exists L0, L1.

	[L0]hull("happy1",1,1), [L0]empty(1,2), [L0]empty(1,3).
	[L0]hull("happy1",2,1), [L0]empty(2,2), [L0]empty(2,3).
	[L0]empty(3,1), [L0]hull("happy2",3,2), [L0]empty(3,3).
	[L0]fireAt(L1,2,2), [L0]fireAt(L1,1,1).

	[L1]hull("sad1",1,1), [L1]hull("sad1",1,2), [L1]empty(1,3).
	[L1]empty(2,1), [L1]hull("sad2",2,2), [L1]empty(2,3).
	[L1]empty(3,1), [L1]empty(3,2), [L1]empty(3,3).
	[L1]fireAt(L0,1,2), [L1]fireAt(L0,1,1), [L1]fireAt(L0,2,3).

}
