
ensem battleship {

	module comingle.lib.ExtLib import {
		union :: ({A},{A}) -> {A}.
		size  :: {A} -> int.
		makeChain :: (A,[A]) -> ({(A,A)},A).
		mset :: [A] -> {A}.
	}

	predicate initGame :: (int,int,int,[loc]) -> trigger.
	predicate fireAt   :: (loc,int,int) -> trigger.
	predicate empty     :: (int,int) -> trigger.
	predicate hull      :: (string,int,int) -> trigger.

	predicate blastAt :: (loc,int,int) -> fact.
	predicate next      :: loc -> fact.
	predicate turn      :: fact.
	predicate all       :: {loc} -> fact.
	predicate damaged   :: (string,int,int) -> fact.
	predicate checkShip :: (loc,string) -> fact.
	predicate checkFleet :: fact.
	predicate dead       :: (loc,loc) -> fact.

	predicate randomFleet  :: (int,int,int) -> actuator.
	predicate notifyTurn   :: loc -> actuator.
	predicate missed       :: (loc,loc,int,int) -> actuator.
	predicate hit          :: (loc,loc,int,int) -> actuator.
	predicate sunk         :: (loc,loc,string,{(int,int)}) -> actuator.
	predicate notifyDead   :: loc -> actuator.
	predicate notifyWinner :: loc -> actuator.

	rule start :: [I]initGame(G,F,C,Ls) 
                          --o [I]turn(),
			      { [A]next(B) | (A,B) <- Cs }, [E]next(I), 
                              { [L]all(Ps), [L]notifyTurn(I), [L]randomFleet(G,F,C) | L <- Ls }
                              where (Cs,E) = makeChain(I,Ls),
                                        Ps = mset(Ls).

	rule shoot :: [A]next(B), [A]all(Ps) \ [A]fireAt(D,X,Y), [A]turn()
                           --o [D]blastAt(A,X,Y), [B]turn(), {[P]notifyTurn(B)|P<-Ps}.

	rule miss :: [D]empty(X,Y) \ [D]blastAt(A,X,Y) --o [D]missed(A,D,X,Y), [A]missed(A,D,X,Y).

	rule goodHit :: [D]all(Ps) \ [D]blastAt(A,X,Y), [D]hull(S,X,Y) --o [D]damaged(S,X,Y), [D]checkShip(A,S),
                                                                           {[P]hit(A,D,X,Y)|P<-Ps}.

	rule dmgHit  :: [D]all(Ps), [D]damaged(S,X,Y) \ [D]blastAt(A,X,Y) --o {[P]hit(A,D,X,Y)|P<-Ps}.

	rule sunk1 :: [D]all(Ps), { [D]damaged(S,X,Y)|(X,Y)<-Ds } \ [D]checkShip(A,S), 
                      { [D]hull(S,W,V)|(W,V)<-Hs } | (size(Hs))==0
                          --o { [P]sunk(A,D,S,Ds) | P <- Ps }, [D]checkFleet().

	rule sunk2 :: [D]checkShip(A,S) --o 1.

	rule deadFleet1 :: [D]next(N) \ [D]all(Ps), [D]checkFleet(), { [D]hull(S,X,Y)|(S,X,Y)<-Hs } | (size(Hs))==0
                           --o { [P]notifyDead(D), [P]dead(D,N) | P <- Ps }.

	rule deadFleet2 :: [D]checkFleet() --o 1.

	rule forward1 :: [A]dead(B,N) \ [A]next(B) --o [A]next(N).

	rule forward2 :: [A]dead(Ax,_),[A]next(B) \ [A]turn() | A==Ax --o [B]turn(). 

	rule winner :: [D]all(Ps), { [D]dead(O,_) | O->Os } | Ps==(union(Os,{D})) 
                           --o { [P]notifyWinner(D) | P<-Ps }.

}

execute battleship {

}
