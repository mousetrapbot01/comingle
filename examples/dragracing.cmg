
ensem dragracing {

	module comingle.lib.ExtLib import {
		makeChain :: [A] -> ([(A,A)],A)
	}

	predicate initRace  :: [loc] -> trigger.
	predicate go        :: trigger.
	predicate sendTap   :: trigger.
	predicate checkExit :: loc  -> trigger.

	predicate at   :: loc -> fact.
	predicate rmAt :: loc -> fact.
	predicate next :: loc -> fact.
	predicate last :: fact.
	predicate all  :: [loc] -> fact.

	predicate renderTrack :: [loc] -> actuator.
	predicate release   :: actuator.
	predicate recvTap   :: loc -> actuator.
	predicate has       :: loc -> actuator.
	predicate decWinner :: loc -> actuator.

	rule start :: [X]initRace(Ls) 
                         --o { [A]next(B) | (A,B) <- Cs }, [E]last(),
                             { [L]all(Ls), [L]at(X), [L]renderTrack(Ls) | L <- Ls },
                             { [X]has(L) | L <- Ls }
                             where (Cs,E) = makeChain(Ls).

	rule go :: [X]all(Ls) \ [X]go() 
                         --o { [L]release() | L <- Ls }. 

	rule update :: [X]rmAt(Y), [X]at(Y) --o 1.

	rule tap :: [X]at(Y) \ [X]sendTap() 
                         --o [Y]recvTap(X).

	rule trans :: [X]next(Z) \ [X]checkExit(Y)
                         --o [Z]has(Y), [Y]rmAt(X), [Y]at(Z).
	
	rule win :: [X]last() \ [X]all(Ls), [X]checkExit(Y)
                         --o { [L]decWinner(Y) | L <- Ls }.

}

execute dragracing {

}
