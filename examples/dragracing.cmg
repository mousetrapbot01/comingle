
ensem dragracing {

	module comingle.lib.ExtLib import {
		mset :: [A] -> {A}.
	}

	module comingle.dragracing.RacerLib import {
		makeChain :: (A,[A]) -> ({(A,A)},A).
	}

	predicate initRace :: [loc] -> trigger.
	predicate go       :: trigger.
	predicate sendTap  :: trigger.
	predicate exiting  :: loc  -> trigger.

	predicate at   :: loc -> fact.
	predicate rmAt :: loc -> fact.
	predicate next :: loc -> fact.
	predicate last :: fact.
	predicate all  :: {loc} -> fact.

	predicate renderTrack :: [loc] -> actuator.
	predicate release   :: actuator.
	predicate recvTap   :: loc -> actuator.
	predicate has       :: loc -> actuator.
	predicate decWinner :: loc -> actuator.

	rule start :: [I]initRace(Ls) 
                         --o { [A]next(B) | (A,B) <- Cs }, [E]last(),
                             { [I]has(P), [P]all(Ps), [P]at(I), [P]renderTrack(Ls) | P <- Ps }
                             where (Cs,E) = makeChain(I,Ls),
                                   Ps = mset(Ls).

	rule go :: [X]all(Ls) \ [X]go() 
                         --o { [L]release() | L <- Ls }. 

	rule update :: [X]rmAt(Y), [X]at(Y) --o 1.

	rule tap :: [X]at(Y) \ [X]sendTap() 
                         --o [Y]recvTap(X).

	rule trans :: [X]next(Z) \ [X]exiting(Y)
                         --o [Z]has(Y), [Y]rmAt(X), [Y]at(Z).
	
	rule win :: [X]last() \ [X]all(Ps), [X]exiting(Y)
                         --o { [P]decWinner(Y) | P <- Ps }.

}

execute dragracing {

}
