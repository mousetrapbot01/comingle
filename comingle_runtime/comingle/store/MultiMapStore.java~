package comingle.store;

import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Iterator;
import java.util.HashMap;
import java.util.Set;

import comingle.facts.Fact;

public class MultiMapStore<F extends Fact> extends Store<F> {

	private HashMap<Integer,LinkedList<F>> store;
	private int count;

	public MultiMapStore() {
		store = new HashMap<Integer,LinkedList<F>>();
	}

	public void add(F elem) { 
		add(elem,-1);
	}

	public void add(F elem, Integer key) { 
		count++;
		if(store.containsKey(key)) {
			LinkedList<F> ls = store.get(key);
			ls.add( elem );
		} else {
			LinkedList<F> ls = new LinkedList<F>();
			ls.add( elem );
			store.put(key, ls);
		}
	}

	public void remove(F elem) { 
		elem.set_dead();
	}

	public StoreIter<F> lookup_candidates() {
		return lookup_candidates(-1);
	}

	public StoreIter<F> lookup_candidates(Integer key) { 
		if(store.containsKey(key)) {
			return new ListStoreIter<F>(store.get(key));
		} else {
			return new EmptyStoreIter<F>();
		}
	} 

	public void purge() {
		Iterator<Integer> keys = store.keySet().iterator();
		while(keys.hasNext()) {
			ListIterator<F> ls = store.get(keys.next()).listIterator();
			while(ls.hasNext()) {
				if(!ls.next().is_alive()) { 
					ls.remove(); 
					count--;
				}
			}
		}
	}

	public int actual_size() { return count; }

	public int size() {
		int lcount = 0;
		Iterator<Integer> keys = store.keySet().iterator();
		while(keys.hasNext()) {
			ListIterator<F> ls = store.get(keys.next()).listIterator();
			while(ls.hasNext()) {
				if(ls.next().is_alive()) { lcount++; }
			}
		}
		return lcount;
	}

	public String toString() {
		String output = ""; // String.format("======== %s ========\n", super.get_name());

		Iterator<Integer> keys = store.keySet().iterator();
		while(keys.hasNext()) {
			Integer key = keys.next();
			ListIterator<F> ls = store.get(key).listIterator();
			// output += String.format("\n%s -> ", key);
			while(ls.hasNext()) {
				Fact cons = ls.next();
				if(cons.is_alive()) { 
					output += String.format("%s ", cons);
				}
			}
		}

		// output += "\n==========================";
		return output;
	}


}
